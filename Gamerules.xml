<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Gamerules</name>
    </assembly>
    <members>
        <member name="T:Gamerules.BoolRule">
            <summary>
            Defines a rule with a boolean value.
            </summary>
        </member>
        <member name="M:Gamerules.BoolRule.#ctor(System.String,System.String,System.Boolean,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Gamerules.BoolRule.Deserialize(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Gamerules.BoolRule.Serialize">
            <inheritdoc/>
        </member>
        <member name="T:Gamerules.IntRule">
            <summary>
            Defines a rule with an integer value.
            </summary>
        </member>
        <member name="M:Gamerules.IntRule.#ctor(System.String,System.String,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Instantiates a new rule instance with a minimum and maximum value.
            </summary>
        </member>
        <member name="M:Gamerules.IntRule.#ctor(System.String,System.String,System.Int32,System.String)">
            <inheritdoc/>
        </member>
        <member name="P:Gamerules.IntRule.Min">
            <summary>
            The minimum value.
            </summary>
        </member>
        <member name="P:Gamerules.IntRule.Max">
            <summary>
            The maximum value.
            </summary>
        </member>
        <member name="M:Gamerules.IntRule.Deserialize(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Gamerules.IntRule.Serialize">
            <inheritdoc/>
        </member>
        <member name="T:Gamerules.IRule">
            <summary>
            Defines a type of gamerule.
            </summary>
            <typeparam name="T">The type of the gamerule's value.</typeparam>
        </member>
        <member name="P:Gamerules.IRule.Name">
            <summary>
            The gamerule's internal name. This should be immutable and can only contain a-z, 0-9, forward slash, and underscore.
            </summary>
        </member>
        <member name="P:Gamerules.IRule.DisplayName">
            <summary>
            The gamerule's display name.
            </summary>
        </member>
        <member name="P:Gamerules.IRule.Description">
            <summary>
            The gamerule's description.
            </summary>
        </member>
        <member name="P:Gamerules.IRule.Value">
            <summary>
            The gamerule's current value.
            </summary>
        </member>
        <member name="P:Gamerules.IRule.DefaultValue">
            <summary>
            The gamerule's fallback value.
            </summary>
        </member>
        <member name="M:Gamerules.IRule.Deserialize(System.String)">
            <summary>
            Gets the gamerule's value from a JSON value.
            </summary>
            <param name="jsonValue">The JSON value.</param>
        </member>
        <member name="M:Gamerules.IRule.Serialize">
            <summary>
            Gets a JSON value from the gamerule's value.
            </summary>
        </member>
        <member name="T:Gamerules.Result">
            <summary>
            Defines a potential error.
            </summary>
        </member>
        <member name="P:Gamerules.Result.Err">
            <summary>
            The error message, or null if there was no error.
            </summary>
        </member>
        <member name="P:Gamerules.Result.IsOk">
            <summary>
            True if there was an error.
            </summary>
        </member>
        <member name="M:Gamerules.Result.FromOk">
            <summary>
            Gets a result that indicates no errors occurred.
            </summary>
        </member>
        <member name="M:Gamerules.Result.FromErr(System.String)">
            <summary>
            Gets a result that indicates an error occurred.
            </summary>
            <param name="err">The error message.</param>
        </member>
        <member name="T:Gamerules.Rule`1">
            <summary>
            An abstract, generic implementation of <see cref="T:Gamerules.IRule"/>.
            </summary>
            <typeparam name="T">The type parameter for <see cref="T:Gamerules.IRule"/>.</typeparam>
        </member>
        <member name="M:Gamerules.Rule`1.#ctor(System.String,System.String,`0,System.String)">
            <summary>
            Instantiates a new rule instance.
            </summary>
        </member>
        <member name="P:Gamerules.Rule`1.Name">
            <inheritdoc/>
        </member>
        <member name="P:Gamerules.Rule`1.Description">
            <inheritdoc/>
        </member>
        <member name="P:Gamerules.Rule`1.DisplayName">
            <inheritdoc/>
        </member>
        <member name="P:Gamerules.Rule`1.DefaultValue">
            <inheritdoc/>
        </member>
        <member name="P:Gamerules.Rule`1.Value">
            <inheritdoc/>
        </member>
        <member name="M:Gamerules.Rule`1.Deserialize(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Gamerules.Rule`1.Serialize">
            <inheritdoc/>
        </member>
        <member name="T:Gamerules.RuleAPI">
            <summary>
            Start here. Provides methods for registering, enumerating, and getting gamerules.
            </summary>
        </member>
        <member name="M:Gamerules.RuleAPI.Register(Gamerules.IRule)">
            <summary>
            Registers a new gamerule or replaces an existing one with the same name.
            </summary>
            <param name="rule">The gamerule instance.</param>
        </member>
        <member name="P:Gamerules.RuleAPI.Rules">
            <summary>
            An enumerable of every registered gamerule.
            </summary>
        </member>
        <member name="M:Gamerules.RuleAPI.TryGetRule(System.String,Gamerules.IRule@)">
            <summary>
            Tries to get a rule with the given name.
            </summary>
            <returns>True if a matching rule exists; false otherwise.</returns>
        </member>
    </members>
</doc>
